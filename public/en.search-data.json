{"/post/2025-04-03-mcp/":{"data":{"":"MCP简介 MCP的核心特点 MCP实战示例 1. 热点新闻聚合 2. 文件操作 3. 代码搜索 最佳实践 总结","1-热点新闻聚合#1. 热点新闻聚合":"以下是通过MCP调用热点新闻API的示例：\n# MCP函数调用示例 def get_hot_news(sources: List[int]) -\u003e Dict: \"\"\" 获取各平台热点新闻 Args: sources: 新闻源ID列表 1 - 知乎热榜 2 - 36Kr热榜 3 - 百度热点 4 - B站热榜 5 - 微博热搜 Returns: 各平台热点新闻数据 \"\"\" return mcp_server.hotnews.get_hot_news(sources=sources) 调用示例:\n# 获取知乎、微博、B站热榜 news = get_hot_news(sources=[1, 4, 5])","2-文件操作#2. 文件操作":"MCP提供了标准化的文件操作接口，简化了文件的读取与编辑：\n# 读取文件 def read_file( target_file: str, start_line: int, end_line: int, read_all: bool = False ) -\u003e str: \"\"\" 读取文件内容 \"\"\" pass # 编辑文件 def edit_file( target_file: str, instructions: str, code_edit: str ) -\u003e None: \"\"\" 编辑文件内容 \"\"\" pass","3-代码搜索#3. 代码搜索":"通过MCP支持的语义化代码搜索，开发者能够轻松查询代码库中的相关内容：\ndef codebase_search( query: str, target_dirs: Optional[List[str]] = None ) -\u003e List[CodeSearchResult]: \"\"\" 语义化搜索代码库 \"\"\" pass","mcp实战示例#MCP实战示例":"","mcp的核心特点#MCP的核心特点":"标准化接口\nMCP提供了统一的函数调用格式，使得不同系统、服务的接口能够以一致的方式对接，简化集成和操作流程。\n类型安全\n通过引入JSONSchema等机制，确保输入参数和返回结果的类型严格匹配，有效避免因类型不匹配引发的错误。\n可扩展性\nMCP框架支持动态注册和管理新的功能模块，开发者可以根据需求灵活地扩展系统功能。\n上下文感知\nMCP能够有效管理和保持对话的上下文信息，支持多轮交互，使得AI模型能够在长期交互中维持一致性和连贯性。\n错误处理\nMCP内建了标准化的错误处理机制，确保系统在异常情况下能够准确反馈错误信息，并方便开发者进行修复。","mcp简介#MCP简介":"MCP（Model Context Protocol）是一种标准化的协议框架，用于促进AI模型与外部系统的高效交互。通过MCP，AI模型可以以结构化的方式调用外部服务，扩展其能力边界并提高智能应用的灵活性和响应速度。","总结#总结":"MCP为AI模型提供了一个标准化、可扩展的外部服务交互框架，使得开发者能够高效、便捷地扩展和优化智能应用。其设计理念是：\n简单易用\n接口设计清晰直观，易于理解和使用。\n可扩展性强\n支持动态扩展和灵活添加功能模块。\n安全可靠\n内置类型检查、错误处理机制，保障系统稳定运行。\n上下文感知\n保证会话的连贯性和一致性，提高用户体验。\n通过MCP，我们可以更好地连接AI与外部资源，拓展其应用场景，满足不同的业务需求。","最佳实践#最佳实践":"参数校验\n调用MCP函数前，建议进行参数有效性验证，确保请求的正确性。 if not validate_parameters(param): raise InvalidParameterError(\"Invalid parameters provided.\") 错误处理\n使用MCP的错误处理机制，确保在发生错误时能够得到清晰的反馈。 try: result = mcp_function() except MCPError as e: handle_error(e) 上下文管理\n为了维持会话的连贯性和一致性，应合理维护对话上下文： context = MCPContext() context.add_message(user_message) response = model.generate(context) 资源释放\n使用MCP的资源管理机制，确保在操作完成后及时释放不再使用的资源。 with MCPResource() as resource: resource.do_something() # 自动释放资源"},"title":"MCP（Model Context Protocol）"},"/post/go-mcp/":{"data":{"":"","1-优雅的工具定义#1. 优雅的工具定义":"func MakeTool[TReq any](name, description string, handler func(context.Context, *ClientConnection, TReq) ([]Content, error)) *Tool","2-json-schema-集成#2. JSON Schema 集成":"包中集成了 JSON Schema 支持，可以：\n自动从 Go 类型生成 Schema 进行请求验证 支持客户端和服务器端验证（规划中）","什么是-mcp#什么是 MCP？":"MCP（Model Context Protocol）是一个用于编写模型上下文协议客户端和服务器的 SDK。\n今天想和大家分享一个有趣的发现 —— 官方 Go 语言工具链中的 MCP（Model Context Protocol）实现。这是一个正在开发中的原型系统，旨在探索客户端/服务器生命周期和绑定的设计空间。","总结#总结":"MCP 包虽然还处于原型阶段，但已经展现出了优秀的设计理念和实现方案。它的模块化设计、类型安全的接口以及可扩展的架构，都让它成为一个值得关注的项目。\n对于想要深入了解 Go 语言工具链实现，或者需要构建类似系统的开发者来说，MCP 的源码绝对值得一读。它展示了如何在 Go 中构建一个现代化的协议实现，以及如何利用 Go 的最新特性来提供优雅的 API。","技术亮点#技术亮点":"","未来规划#未来规划":"从代码中的 TODO 注释可以看出，还有一些特性正在规划中：\n分页支持 完整的客户端/服务器操作支持 Streamable HTTP 传输 多版本协议规范支持 完善的 JSON Schema 支持","核心特性#核心特性":"客户端/服务器架构\n提供了 NewClient 和 NewServer 接口用于创建 MCP 客户端或服务器 支持通过 Transport 实例连接对等端 灵活的特性扩展机制，可以通过 Add 方法添加新功能 工具系统\n实现了一个强大的工具定义和处理系统 支持通过泛型优雅地定义新工具 内置 JSON Schema 支持，用于请求验证 传输层抽象\n支持多种传输协议 包含 SSE（Server-Sent Events）实现 计划支持 Streamable HTTP 传输"},"title":"深度解析：官方 Go 语言工具链中的 MCP（Model Context Protocol）实现"}}